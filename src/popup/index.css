@import url(./tokens.css);
/* css reset */
* {
  box-sizing: border-box;
  margin: unset;
  padding: unset;
}

html {
  overflow: hidden;
}
body::-moz-scrollbar {
  display: none;
}
body::-webkit-scrollbar {
  display: none;
}
body::-ms-overflow-style {
  display: none;
}

ul {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

li {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background-color: var(--color-background-surface);
  justify-content: space-between;
  padding: 0.5rem;
  padding-inline-start: 1rem;
  border-radius: 0.5rem;
}

ul.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(6rem, 1fr));
  gap: 0.5rem;
  padding: 1rem;
  background-color: var(--color-background-surface);
  border-radius: 0.5rem;
}

li.image {
  position: relative;
  padding: unset;
  background-color: unset;
  flex-direction: column;
}

li.image > img {
  border-radius: 6rem;
  width: 6rem;
  height: 6rem;
  object-fit: cover;
  overflow: hidden;
}

li.random > img {
  outline: 4px solid var(--color-secondary-container);
  outline-offset: -4px;
}

li.random::after {
  content: 'Random';
  position: absolute;
  inset-inline-end: -0.25rem;
  inset-block-start: 0;
  transform: rotate(12deg);
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--color-secondary-container);
  color: var(--color-secondary-onContainer);
  font-size: var(--font-size-0);
  border-radius: 4px;
  padding: 0.25rem;
}

body {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin: unset;
  width: 32rem;
  height: 38rem;
  padding: 1.5rem;
  background-color: var(--color-background-base);
  color: var(--color-background-on);
  font-size: var(--font-size-1);
  overflow-x: scroll;
  font-weight: var(--font-weight-regular);

  /* hide scrollbar */
  scrollbar-width: none;
  -ms-overflow-style: none;
  font-family: var(--font-family-sans);
}

.custom-category-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

h1 {
  font-size: var(--font-size-3);
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-serif);
  line-height: 1.25;
}

details > summary {
  font-family: var(--font-family-serif);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-2);
  line-height: 1.25;
  border-radius: 0.5rem;
  padding: 0.75rem;
  cursor: pointer;
}

details > summary:focus-visible {
  outline: 2px solid var(--color-primary-base);
}

details {
  border: 2px solid var(--color-background-surface);
  border-radius: 0.5rem;
  padding: 0.5rem;
}
.input-text-row {
  display: flex;
  flex-direction: row;
  gap: 0.5rem;
  align-items: center;
}

input {
  display: inline-flex;
  width: 100%;
  border: 2px solid var(--color-background-surface);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  background-color: var(--color-background-base);
  color: var(--color-background-on);
}

input:focus-visible {
  outline: 2px solid var(--color-primary-base);
}

input[type='file'] {
  display: none;
}

button,
label[role='button'] {
  border: 2px solid var(--color-background-surface);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  background-color: var(--color-primary-on);
  color: var(--color-primary-onContainer);
  cursor: pointer;

  transition: all 250ms ease-in-out;
}

button.small,
label[role='button'].small {
  padding: 0.5rem 0.75rem;
  font-size: var(--font-size-0);
}

button:hover,
label[role='button']:hover {
  background-color: var(--color-primary-base);
  color: var(--color-primary-on);
}

button:focus-visible,
label[role='button']:focus-visible {
  outline: 2px solid var(--color-primary-base);
}

button:disabled,
label[role='button']:disabled {
  background-color: var(--color-disabled-container);
  color: var(--color-disabled-onContainer);
  cursor: not-allowed;
}

button.destructive,
label[role='button'].destructive {
  background-color: var(--color-error-container);
  border-color: var(--color-error-container);
  color: var(--color-error-onContainer);
}

button.destructive:hover,
label[role='button'].destructive:hover {
  background-color: var(--color-error-base);
  border-color: var(--color-error-base);
  color: var(--color-error-on);
}

button.reset,
label[role='button'].reset {
  color: var(--color-error-base);
}

button.reset:hover,
label[role='button'].reset:hover {
  color: var(--color-error-on);
  background-color: var(--color-error-base);
}

label[role='button'] {
  white-space: nowrap;
  margin-inline-start: auto;
}
